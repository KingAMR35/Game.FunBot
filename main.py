import telebot
import time
from random import choice
import os
from dotenv import load_dotenv
from api_service import FusionBrainAPI
from telebot import types
from bs4 import BeautifulSoup as b
import random
import requests


load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN'))

bot.set_my_commands(
    commands=[
        telebot.types.BotCommand("start", "–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞üöÄ"),
        telebot.types.BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ—Ç–∞üîÑ"),
        telebot.types.BotCommand("joke", "–†–∞—Å—Å–∫–∞–∂–µ—Ç —à—É—Ç–∫—Éü§≠"),
        telebot.types.BotCommand("meme", "–°–∫–∏–Ω–µ—Ç –≤–∞–º –º–µ–ºüòÑ"),
        telebot.types.BotCommand("game", "–ú–∏–Ω–∏ –∏–≥—Ä–∞üéÆ"),
        telebot.types.BotCommand("generate", "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æüì∏"),
        telebot.types.BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µüìù"),
    ])

last_used = {}
COOLDOWN_SECONDS = 30

image_counter = 0 

URL = 'https://www.anekdot.ru/last/good/'
def parser(url):
    r = requests.get(url)
    soup = b(r.text, 'html.parser')
    anekdots = soup.find_all('div', class_='anekdot')
    return [c.text for c in anekdots]  
list_of_jokes = parser(URL)
random.shuffle(list_of_jokes)


@bot.message_handler(commands=["start"])
def start_bot(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–µ—Å–µ–ª–æ –∏ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!")
    
    
@bot.message_handler(commands=["restart"])
def restart_bot(message):
    bot.send_message(message.chat.id, "–ò–¥—ë—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µüîÑ")
    time.sleep(1)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–µ—Å–µ–ª–æ –∏ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!")
    
    
@bot.message_handler(commands=["joke"])
def joke(message):
    list_of_jokes = parser(URL)
    random.shuffle(list_of_jokes)


    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π", callback_data="button")
    keyboard.row(button)


    bot.send_message(message.chat.id, list_of_jokes.pop(), reply_markup=keyboard)



@bot.message_handler(commands=['meme'])
def send_mem(message):
    n = random.choice(os.listdir('images'))
    with open('images/' + n, 'rb') as f:  
        bot.send_photo(message.chat.id, f)   


@bot.message_handler(commands=['game'])
def game(message):
    games = ['üéØ', '‚öΩ', 'üé≤', 'üé∞', 'üèÄ']
    selected_game = choice(games)
    bot.send_message(message.chat.id, f"–í–∞—à–∞ –∏–≥—Ä–∞: {selected_game}")
    bot.send_dice(message.chat.id, selected_game)

@bot.message_handler(commands=["info"])
def info_bot(message):
    keyboard = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton(text="1.0", callback_data="version_1.0")
    button3 = types.InlineKeyboardButton(text="1.1", callback_data="version_1.1")
    button4 = types.InlineKeyboardButton(text="1.2", callback_data="version_1.2")
    button04 = types.InlineKeyboardButton(text="1.3", callback_data="version_1.3")
    button5 = types.InlineKeyboardButton(text="2.0", callback_data="version_2.0")
    keyboard.row(button2)
    keyboard.row(button3)
    keyboard.row(button4)
    keyboard.row(button04)
    keyboard.row(button5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é, –ø—Ä–æ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å", reply_markup=keyboard)

@bot.message_handler(commands=['generate'])
def handle_message(message):
    global image_counter
    user_id = message.from_user.id
    now = time.time()
    if user_id in last_used and (now - last_used[user_id]) < COOLDOWN_SECONDS:
        bot.reply_to(message, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.')
        return
    last_used[user_id] = now


    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Ñ—Ä–∞–∑—É –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ—ë.')
    bot.register_next_step_handler(message, prompt)
def prompt(message):
    global image_counter
    prompt = message.text
    chat_id = message.chat.id
    bot.send_chat_action(chat_id, 'typing')
    bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æüîÑ")
    bot.send_chat_action(chat_id, 'upload_photo')

        

    api = FusionBrainAPI('https://api-key.fusionbrain.ai/', os.getenv('FB_API_KEY'), os.getenv('FB_SECRET_KEY'))
    pipeline_id = api.get_pipeline()
    uuid = api.generate(prompt, pipeline_id)
    files = api.check_generation(uuid)
    
    image_counter += 1
    unique_filename = f"generated_{uuid}.png"
    save_dir = "generated_images/"
    os.makedirs(save_dir, exist_ok=True)
    final_image_path = os.path.join(save_dir, unique_filename)

    api.save_image(files[0], final_image_path)


    with open(final_image_path, 'rb') as file:
        bot.send_photo(chat_id, file)
    bot.delete_message(chat_id, message.message_id + 1)
    bot.delete_message(chat_id, message.message_id - 1)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline_message(call):
    if call.data == 'button':
        list_of_jokes = parser(URL)
        random.shuffle(list_of_jokes)

        old_joke = call.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç–ª–∏—á–∞–ª—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
        while list_of_jokes[-1] == old_joke:
            random.shuffle(list_of_jokes)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–ª–µ–¥—É—é—â–∏–π"
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π", callback_data="button")
        keyboard.row(button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=list_of_jokes.pop(), reply_markup=keyboard)
    
    versions = {
        "version_1.0": "–í–µ—Ä—Å–∏—è 1.0 ‚Äî –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –í –Ω–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /restart",
        "version_1.1": "–í–µ—Ä—Å–∏—è 1.1 ‚Äî –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–∏—Ö –±–∞–≥–æ–≤. –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /game",
        "version_1.2": "–í–µ—Ä—Å–∏—è 1.2 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–∫ –≤ /meme",
        "version_1.3": "–í–µ—Ä—Å–∏—è 1.3 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /generate, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–µ.",
        "version_2.0": "–í–µ—Ä—Å–∏—è 2.0 ‚Äî –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /generate, –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /joke, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ html."
    }

    # –ë–µ—Ä—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
    version_description = versions.get(call.data, "–û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=version_description)
    
bot.infinity_polling()